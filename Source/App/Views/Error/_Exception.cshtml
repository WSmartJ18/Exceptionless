@using Exceptionless.App.Models.Error
@using Exceptionless.Models
@model ErrorModel

<h3 class="visible-print">Exception</h3>
<table class="table table-bordered table-striped table-fixed keyvalue">
    <tr class="hidden-print">
        <th>Occurred On</th>
        <td>@Model.OccurrenceDate.ToString("MMMM d, yyyy h:mm:ss tt") (<span data-bind="livestamp: occurrence, hideTitle: true"></span>)</td>
    </tr>
    <tr>
        <th>Error Type</th>
        <td><span class="t8-default">@Model.StackingType</span></td>
    </tr>
    <tr>
        <th>Message</th>
        <td><span class="t8-lines2">@Model.StackingMessage</span></td>
    </tr>
    @if(!String.IsNullOrEmpty(Model.Code)) {
        <tr>
            <th>Code</th>
            <td><span class="t8-default">@Model.Code</span></td>
        </tr>
    }
</table>

<h4 class="pull-left">Stack Trace</h4>
<div class="pull-right" style="margin-top: 1.2em">
    <button class="btn btn-gray btn-mini clipboard" title="Copy to Clipboard" data-clipboard-target="stacktrace"><i class="fa fa-copy"></i></button>
</div>
<div class="clearfix"></div>
<pre id="stacktrace" class="stacktrace">@Html.Raw(Model.ToHtmlString())</pre>

@if (Model.Modules != null && Model.Modules.Any()) {
    <h4>Loaded Modules</h4>
    <table class="table table-bordered table-striped table-fixed">
        <thead>
            <tr>
                <th>Name</th>
                <th>Version</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var item in Model.Modules) {
            <tr>
                <td><span class="t8-default">@item.Name</span></td>
                <td>@item.Version</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (Model.StackingExtendedData != null && Model.StackingExtendedData.ContainsKey(DataDictionary.EXCEPTION_INFO_KEY)) {
    @Html.Partial("_ExtendedDataItem", new ExtendedDataItemModel { Data = new KeyValuePair<string, object>(DataDictionary.EXCEPTION_INFO_KEY, Model.StackingExtendedData[DataDictionary.EXCEPTION_INFO_KEY]), Title = "Additional Data" })
}
