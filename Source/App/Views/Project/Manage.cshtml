@using Exceptionless.App.Extensions
@using Exceptionless.Core
@model Exceptionless.App.Models.Project.ProjectModel
@{
    ViewBag.Title = "Manage \"" + Model.Name + "\" Project";
}

@Html.Partial("_Notifications")

<div class="row">
    <div class="span9">
        <div class="widget" id="project-@Model.Id">
            <div class="widget-header">
                <h3>@ViewBag.Title</h3>
            </div> <!-- /widget-header -->
            <div class="widget-content">
                <div class="tabbable">
                    <ul class="nav nav-tabs" data-tabs="tabs" id="project-tabs">
                        <li class="active">
                            <a data-toggle="tab" href="#default">Project</a>
                        </li>
                        <li><a data-toggle="tab" href="#notifications">Notifications</a></li>
                        <li><a data-toggle="tab" href="#keys">API Keys</a></li>
                        <li><a data-toggle="tab" href="#settings">Settings</a></li>
                        <li><a data-toggle="tab" href="#integrations">Integrations</a></li>
                    </ul>

                    <div class="tab-content">
                        <div class="tab-pane active" id="default">
                            @using (Html.BeginForm()) {
                                @Html.HiddenFor(m => m.Id)

                                @Html.BeginControlGroupFor(m => m.Name)
                                    @Html.LabelFor(m => m.Name, new { @class = "control-label" })
                                    <div class="controls">
                                        @Html.TextBoxFor(m => m.Name, new { @class = "input-large", placeholder = "Project name", data_bind = "value: name, valueUpdate: 'keyup'" })
                                        @Html.ValidationMessageFor(m => m.Name, null, new { @class = "help-inline" })
                                    </div>
                                @Html.EndControlGroup()

                                @Html.BeginControlGroupFor(m => m.OrganizationName)
                                    @Html.LabelFor(m => m.OrganizationName, new { @class = "control-label" })
                                    <div class="controls">
                                        @Html.TextBoxFor(m => m.OrganizationName, new { @class = "input-large", placeholder = "Organization name", disabled = "" })
                                        @Html.ValidationMessageFor(m => m.OrganizationName, null, new { @class = "help-inline" })
                                    </div>
                                @Html.EndControlGroup()

                                @Html.BeginControlGroupFor(m => m.TimeZone)
                                    @Html.LabelFor(m => m.TimeZone, new { @class = "control-label" })
                                    <div class="controls">
                                        @Html.TextBoxFor(m => m.TimeZone, new { @class = "span4", disabled = "" })
                                        @Html.ValidationMessageFor(m => m.TimeZone, null, new { @class = "help-inline" })
                                    </div>
                                @Html.EndControlGroup()

                                @Html.BeginControlGroupFor(m => m.CustomContent)
                                    @Html.LabelFor(m => m.CustomContent, new { @class = "control-label" })
                                    <div class="controls">
                                        @Html.TextAreaFor(m => m.CustomContent, new { @class = "span8", data_bind = "value: customContent, valueUpdate: 'keyup'" })
                                        @Html.ValidationMessageFor(m => m.CustomContent, null, new { @class = "help-inline" })
                                    </div>
                                @Html.EndControlGroup()

                                <div class="form-actions">
                                    @Html.ActionLink("Go To Dashboard", "Index", "Project", null, new { @class = "btn" })
                                    <div class="pull-right">
                                        <button class="btn" data-bind="command: resetDataCommand, template: { name: 'command-button-template', data: { command: resetDataCommand, name: 'Delete All Project Data', executingName: 'Deleting All Project Data' } }">Delete All Project Data</button>
                                        <button class="btn btn-primary" data-bind="command: saveCommand, template: { name: 'command-button-template', data: { command: saveCommand, name: 'Save', executingName: 'Saving' } }">Save</button>
                                    </div>
                                </div> <!-- /form-actions -->
                            }
                        </div>

                        <div class="tab-pane" id="notifications">
                            @using (Html.BeginForm()) {
                                @Html.BeginLabelFor(m => m.SendDailySummary, new { @class = "checkbox" })
                                @Html.CheckBoxFor(m => m.SendDailySummary, new { data_bind="checked: sendDailySummary" })
                                <text>Send daily project summary</text>
                                @Html.EndLabel()
                                
                                <hr style="display: none;" data-bind="visible: !hasPremiumFeatures()"/>
                                <div class="alert in fade alert-success" style="display: none;" data-bind="visible: !hasPremiumFeatures()">
                                    <a href="#plan-modal" onclick="exceptionless.App.showChangePlanDialog()">Upgrade now</a> to enable occurrence level notifications!
                                </div>
                                @Html.HiddenFor(m => m.Id)
                                @Html.HiddenFor(m => m.UserId, new { data_bind="value: userId" })
                                
                                @Html.BeginLabelFor(m => m.ReportCriticalErrors, new { @class = "checkbox" })
                                @Html.CheckBoxFor(m => m.ReportCriticalErrors, new { data_bind="checked: reportCriticalErrors, enable: hasPremiumFeatures" })
                                <text>Notify me on critical errors</text>
                                @Html.EndLabel()
                                
                                @Html.BeginLabelFor(m => m.ReportRegressions, new { @class = "checkbox" })
                                @Html.CheckBoxFor(m => m.ReportRegressions, new { data_bind="checked: reportRegressions, enable: hasPremiumFeatures" })
                                <text>Notify me on error regressions</text>
                                @Html.EndLabel()

                                <hr/>
                                
                                @Html.BeginControlGroupFor(m => m.Mode)
                                @Html.LabelFor(m => m.Mode, "Choose how often you want to receive notifications for event occurrences in this project.", new { @class = "control-label" })
                                <div class="controls">
                                    <div class="btn-group" data-toggle="buttons-radio">
                                        <button type="button" class="btn btn-primary" data-value="0" data-bind="checkedButtons: mode, enable: hasPremiumFeatures">Never</button>
                                        <button type="button" class="btn btn-primary" data-value="1" data-bind="checkedButtons: mode, enable: hasPremiumFeatures">New Only</button>
                                        <button type="button" class="btn btn-primary" data-value="2" data-bind="checkedButtons: mode, enable: hasPremiumFeatures">All Occurrences</button>
                                    </div>
                                </div>
                                @Html.EndControlGroup()
                                
                                <div data-bind="visible: mode() > 0">
                                    @Html.BeginLabelFor(m => m.ReportKnownBotErrors, new { @class = "checkbox" })
                                    @Html.CheckBoxFor(m => m.ReportKnownBotErrors, new { data_bind="checked: reportKnownBotErrors, enable: hasPremiumFeatures" })
                                    Notify me on errors from known bots
                                    @Html.EndLabel()
                                </div>
                                
                                <div data-bind="visible: mode() > 0">
                                    @Html.BeginLabelFor(m => m.Report404Errors, new { @class = "checkbox" })
                                    @Html.CheckBoxFor(m => m.Report404Errors, new { data_bind="checked: report404Errors, enable: hasPremiumFeatures" })
                                    Notify me on 404 errors
                                    @Html.EndLabel()
                                </div>
                                
                                <div class="form-actions">
                                    @Html.ActionLink("Go To Dashboard", "Index", "Project", null, new { @class = "btn" })
                                    <div class="pull-right">
                                        <button class="btn btn-primary" data-bind="command: saveNotificationSettingsCommand, template: { name: 'command-button-template', data: { command: saveNotificationSettingsCommand, name: 'Save', executingName: 'Saving' } }">Save</button>
                                    </div>
                                </div> <!-- /form-actions -->
                            }
                        </div>

                        <div class="tab-pane" id="keys">
                            <table class="table table-striped table-bordered table-fixed">
                                <thead>
                                    <tr>
                                        <th>API Key</th>
                                        <th class="action" data-bind="visible: apiKeys().length > 0">&nbsp;</th>
                                    </tr>
                                </thead>
                                <tbody data-bind="foreach: { data: apiKeys, afterRender: glueZeroClipboard }, visible: apiKeys().length > 0">
                                    <tr>
                                        <td data-bind="text: $data"></td>
                                        <td>
                                            <button class="btn btn-small clipboard" title="Copy to Clipboard" data-bind="attr: { 'data-clipboard-text': $data }"><i class="fa fa-copy"></i></button>
                                            <button class="btn btn-small" title="Delete" data-bind="click: $root.removeApiKey"><i class="fa fa-times"></i></button>
                                        </td>
                                    </tr>
                                </tbody>
                                <tbody style="display: none;" data-bind="visible: apiKeys().length == 0">
                                    <tr>
                                        <td colspan="2" class="text-warning">This project does not have an API Key.</td>
                                    </tr>
                                </tbody>
                            </table>
                            
                            <div class="form-actions">
                                @Html.ActionLink("Go To Dashboard", "Index", "Project", null, new { @class = "btn" })
                                <div class="pull-right">
                                    <button class="btn btn-primary" data-bind="click: $root.addApiKey">New API Key</button>
                                </div>
                            </div> <!-- /form-actions -->
                        </div>

                        <div class="tab-pane" id="settings">
                            <h5>Data Exclusions</h5>
                            <p>
                                A comma delimited list of field names that should be removed from any event report data
                                (e.g.,  extended data properties, form fields, cookies and query parameters). You can also
                                specify a <a href="http://docs.exceptionless.com/contents/security/" target="_blank" title="Data Exclusions documentation">field name with wildcards (<strong>*</strong>)</a>
                                to specify starts with, ends with, or contains just to be extra safe.
                            </p>

                            <input type="text" class="input-xxlarge" data-bind="value: dataExclusions" placeholder="Example: *Password*, CreditCard*, SSN" />

                            <h5>Client Configuration</h5>
                            <p>The configuration values on this page will be automatically sent to the Exceptionless clients for your project and be available in the <code>ExceptionlessClient.Default.Configuration</code> dictionary.</p>
                            @* TODO: The add new dropdown should be populated with default settings we know about. *@
                            <table class="table table-striped table-bordered table-fixed">
                                <thead>
                                    <tr>
                                        <th>Key</th>
                                        <th>Value</th>
                                        <th class="action-small" data-bind="visible: configuration().length > 0">&nbsp;</th>
                                    </tr>
                                </thead>
                                <tbody data-bind="foreach: configuration(), visible: configuration().length > 0">
                                    <tr>
                                        <td>
                                            <div class="control-group" style="margin-bottom: 0" data-bind="validationElement: key">
                                                <input type="text" data-bind="value: key, valueUpdate: 'keyup'" style="margin-bottom: 0; width: 94%; width: -webkit-calc(100% - 14px); width: -moz-calc(100% - 14px); width: calc(100% - 14px);" required />
                                            </div>
                                        </td>
                                        <td>
                                            <div class="control-group" style="margin-bottom: 0" data-bind="validationElement: value">
                                                <input type="text" data-bind="value: value, valueUpdate: 'keyup'" style="margin-bottom: 0; width: 94%; width: -webkit-calc(100% - 14px); width: -moz-calc(100% - 14px); width: calc(100% - 14px);" required />
                                            </div>
                                        </td>
                                        <td>
                                            <button class="btn btn-small" title="Delete" data-bind="click: $root.removeConfigurationValue"><i class="fa fa-times"></i></button>
                                        </td>
                                    </tr>
                                </tbody>
                                <tbody style="display: none;" data-bind="visible: configuration().length == 0">
                                    <tr>
                                        <td colspan="3">This project does not contain any custom configuration settings.</td>
                                    </tr>
                                </tbody>
                            </table>

                            <div class="form-actions">
                                @Html.ActionLink("Go To Dashboard", "Index", "Project", null, new { @class = "btn" })
                                <div class="pull-right">
                                    <button class="btn" data-bind="click: $root.addConfigurationValue">Add</button>
                                    <button class="btn btn-primary" data-bind="command: saveConfigurationSettingsCommand, template: { name: 'command-button-template', data: { command: saveConfigurationSettingsCommand, name: 'Save', executingName: 'Saving' } }">Save</button>

                                </div>
                            </div> <!-- /form-actions -->
                        </div>

                        <div class="tab-pane" id="integrations">
                            <div class="alert in fade alert-success" style="display: none;" data-bind="visible: !hasPremiumFeatures()">
                                <a href="#plan-modal" onclick="exceptionless.App.showChangePlanDialog()">Upgrade now</a> to enable integrations!
                            </div>

                            <p>
                                The following web hooks will be called for this project. We also support
                                <a href="http://zapier.com/" target="_blank">Zapier</a> which allows
                                you to easily integrate Exceptionless with many different services (200+)
                                like JIRA, HipChat, Twilio, Basecamp and more.
                            </p>

                            <table class="table table-striped table-bordered table-fixed">
                                <thead>
                                    <tr>
                                        <th>Url</th>
                                        <th>Event Types</th>
                                        <th class="action-small" data-bind="visible: projectHooks().length > 0">&nbsp;</th>
                                    </tr>
                                </thead>
                                <tbody data-bind="foreach: projectHooks(), visible: projectHooks().length > 0">
                                    <tr>
                                        <td data-bind="text: url"></td>
                                        <td data-bind="foreach: eventTypes">
                                            <span class="label label-success" data-bind="text: $data"></span>
                                        </td>
                                        <td>
                                            <button class="btn btn-small" title="Delete" data-bind="click: $root.removeProjectHook"><i class="fa fa-times"></i></button>
                                        </td>
                                    </tr>
                                </tbody>
                                <tbody style="display: none;" data-bind="visible: projectHooks().length == 0">
                                    <tr>
                                        <td colspan="3">This project does not contain any integrations.</td>
                                    </tr>
                                </tbody>
                            </table>

                            <div class="form-actions">
                                @Html.ActionLink("Go To Dashboard", "Index", "Project", null, new { @class = "btn" })
                                <div class="pull-right">
                                    <button class="btn btn-primary" data-bind="click: $root.addProjectHook">Add Web Hook</button>
                                </div>
                            </div> <!-- /form-actions -->

                            <div id="add-new-item-modal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="add-new-item-modal" aria-hidden="true">
                                <div class="modal-header">
                                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                                    <h3>Add "<span data-bind="text: name"></span>" Web Hook</h3>
                                </div>
                                <div class="modal-body">
                                    <div class="control-group" data-bind="validationElement: url">
                                        <label for="url" class="control-label">URL</label>
                                        <div class="controls">
                                            <input type="url" class="input-xlarge" data-bind="value: url, valueUpdate: 'keyup'" placeholder="Enter the URL to call" required>
                                        </div>
                                    </div>
                                    <p>Control when the web hook is called by choosing the event types below.</p>
                                    <div class="control-group" data-bind="validationElement: eventTypes">
                                        <div class="controls controls-row">
                                            <label class="checkbox span2">
                                                <input type="checkbox" data-bind="checked: eventTypes" value="@ProjectHookRepository.EventTypes.NewError">
                                                <abbr title="Occurs when a new event that has never been seen before is reported to your project.">New Event</abbr>
                                            </label>
                                            <label class="checkbox span2">
                                                <input type="checkbox" data-bind="checked: eventTypes" value="@ProjectHookRepository.EventTypes.ErrorRegression">
                                                <abbr title="Occurs when an event that has been marked as fixed is reported to your project.">Regression</abbr>
                                            </label>
                                            <label class="checkbox span2">
                                                <input type="checkbox" data-bind="checked: eventTypes" value="@ProjectHookRepository.EventTypes.CriticalError">
                                                <abbr title="Occurs when an event that has been marked as critical is reported to your project.">Critical Event</abbr>
                                            </label>
                                            <label class="checkbox span2">
                                                <input type="checkbox" data-bind="checked: eventTypes" value="@ProjectHookRepository.EventTypes.StackPromoted">
                                                <abbr title="Used to promote event stacks to external systems.">Promoted</abbr>
                                            </label>
                                        </div>
                                        <p class="error help-inline" data-bind="validationMessage: eventTypes"></p>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn" data-dismiss="modal">Cancel</button>
                                    <button class="btn btn-primary pull-right" data-bind="command: saveProjectHookCommand, template: { name: 'command-button-template', data: { command: saveProjectHookCommand, name: 'Create Web Hook', executingName: 'Creating Web Hook' } }">Create Web Hook</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div> <!-- /widget-content -->
        </div> <!-- /widget -->
    </div> <!-- /span9 -->
</div> <!-- /row -->
@section FooterContent {
    @Html.Partial("_CommandButtonTemplate")
    <script type="text/javascript">
        $(document).ready(function() {
            var vm = new exceptionless.project.ManageViewModel('project-@Model.Id', 'main-nav', '@Model.Id', 'project-tabs', @Html.Raw(Json.Encode(Model)));
        });
    </script>
}
