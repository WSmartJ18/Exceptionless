@{
    Layout = "~/Views/Shared/_FilterLayout.cshtml";
    ViewBag.Title = "Download Samples";
}

<div class="widget" id="configure-project">
    <div class="widget-header">
        <i class="fa fa-th-list"></i>
        <h3>Configure Exceptionless Client</h3>
    </div>

    <div class="widget-content">
        <p>The Exceptionless client can be integrated into your application in just a few easy steps.</p>
        <ol>
            <li style="margin-bottom: 30px;">
                <p>Select your project type:</p>
                <div id="clients" class="btn-group">
                    <button class="btn dropdown-toggle" data-toggle="dropdown"><span data-bind="text: selectedProjectType().value">Loading...</span> <span class="caret"></span></button>
                    <ul class="dropdown-menu" data-bind="foreach: projectTypes">
                        <!--ko if: $data === $parent.selectedProjectType() -->
                        <li class="active"><a data-bind="text: value"></a></li>
                        <!-- /ko -->
                        <!--ko ifnot: $data === $parent.selectedProjectType() -->
                        <li><a data-bind="attr: { href: '#' + key() }, text: value, click: $parent.updateSelectedProjectType"></a></li>
                        <!-- /ko -->
                    </ul>
                </div>
            </li>
            <li style="margin-bottom: 30px;">
                <p>Add the Exceptionless <a href="http://nuget.org" target="_blank">NuGet</a> package to your Visual Studio project by running this command in the <a href="http://docs.nuget.org/docs/start-here/using-the-package-manager-console">Package Manager Console</a>:</p>
                <pre><a href="http://nuget.org/packages/exceptionless" data-bind="attr: { href: 'http://nuget.org/packages/' + selectedProjectType().key() }, text: 'Install-Package ' + selectedProjectType().key()" target="_blank"></a></pre>
            </li>
            <li>
                <p>Update the <code>&lt;exceptionless apiKey="API_KEY_HERE" /&gt;</code> section located in the project's <span data-bind="text: applicationConfigName"></span> with your Exceptionless API key:</p>
                <div class="input-append">
                    <input id="appendedInputButton" type="text" data-bind="value: apiKey" />
                    <button id="copyApiKey" class="btn" title="Copy to Clipboard" data-bind="attr: { 'data-clipboard-text': apiKey }"><i class="fa fa-copy"></i></button>
                </div>
            </li>
            <li style="margin-top: 15px;" data-bind="visible: $root.selectedProjectType().key() === 'Exceptionless'">
                <p>Import the <code>Exceptionless</code> namespace and add a call to <code>ExceptionlessClient.Default.Startup()</code> during the startup of your app.</p>
            </li>
            <li style="margin-top: 15px;" data-bind="visible: $root.selectedProjectType().key() === 'Exceptionless.Nancy'">
                <p>Import the <code>Exceptionless</code> namespace and add a call to <code>Exceptionless.ExceptionlessClient.Default.RegisterNancy(pipelines)</code> with an instance of Nancy.Bootstrapper.IPipelines inside of your NancyBootstrapper's ApplicationStartup method.</p>
            </li>
            <li style="margin-top: 15px;" data-bind="visible: $root.selectedProjectType().key() === 'Exceptionless.Windows' || $root.selectedProjectType().key() === 'Exceptionless.Wpf'">
                <p>Import the <code>Exceptionless</code> namespace and add a call to <code>ExceptionlessClient.Default.Register()</code> during the startup of your app.</p>
            </li>
            <li style="margin-top: 15px;" data-bind="visible: $root.selectedProjectType().key() === 'Exceptionless.WebApi'">
                <p>Import the <code>Exceptionless</code> namespace and add a call to <code>ExceptionlessClient.Default.RegisterWebApi(config)</code> with an instance of HttpConfiguration during the startup of your app.</p>
                <p>If you are hosting Web API inside of ASP.NET, you would register Exceptionless like: <code>Exceptionless.ExceptionlessClient.Default.RegisterWebApi(GlobalConfiguration.Configuration)</code></p>
            </li>
        </ol>
        <p><strong>That's it!</strong> Your project should now automatically be sending all unhandled exceptions to Exceptionless.  You can also send handled exceptions to Exceptionless using <code>ex.ToExceptionless().Submit()</code>.</p>
        <div class="alert alert-success">For more information and troubleshooting tips, view the <a target="_blank" href="http://docs.exceptionless.com/contents/home/">Exceptionless docs</a>.</div>
        <div class="form-actions">
            <a href="@Url.Action("Manage", "Project")#notifications" class="btn">Notification Settings</a>
            <div class="pull-right">
                @Html.ActionLink("Go To Dashboard", "Index", "Project", null, new { @class = "btn btn-primary" })
            </div>
        </div>
    </div>
</div>

@section FooterContent {
    <script type="text/javascript">
        $(document).ready(function() {
            var vm = new exceptionless.project.ConfigureViewModel('configure-project', 'main-nav', null, 'projects', 'daterange', '#copyApiKey');
            $("#appendedInputButton").click(function () {
                $(this).select();
            });
        });
    </script>
}